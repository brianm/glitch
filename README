Glitch is a way of doing code reviews. The core concept in glitch is
that code review comments should flow with the code. The base layer is
just a set of conventions for annotation comments in the source
code. Above that can be built web UIs (review board, crucible, etc),
workflows (filing a review creates a review branch, folks check
comments in there, updates based on the review happen there, the
branch is merged into the main line upon review completion), or
whatnot.

Proposed syntax:

def foo
    # @cr BITCH-1 brianm use '' instead of "" for performance
    puts "hello world"
end

The specifices are:

<stuff> @cr <review id> <user id> <comment>

Where stuff should generally be whitespace and line comment
indicator. Review ID is chosen by the review initiator, should
probably be unique. User id is who is leaving the comment, comment
is... well, the code review comment!

The first part to figure out is a basic comment syntax which is easy
to do by hand, easy to extract, and whatnot.

Alternatively, we can support a system where a blank comment means
"take everything until a closing thing" or "take everything until the
leading <stuff> is different," for example:

def foo
    # @cr BITCH-1 brianm
    # might want to consider using '' instead of "" for
    # performance. Of course, if that boost matters, consider
    # looking up K&R's implementation.
    puts "hello world"
end

In this case a much longer comment is more pleasently formatted. An
alternative would be an explicit begin/end and take everything in
between, but that would open the door for putting non-comments in,
which could lead to confusion:

def foo
    # @cr BITCH-1 brianm {
    # might want to consider using '' instead of "" for
    # performance. Of course, if that boost matters, consider
    # looking up K&R's implementation.
    printf("hello, world");
    # or something like that, but pointedly in C
    # @cr }
    puts "hello world"
end

Aside from the errant change to the source, it is kind of ugly.